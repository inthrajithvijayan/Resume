  Putty System login IP:192.168.10.130
  Putty System login: root - Foni123
  Putty Server login: root - Foni@123456
 
 
 
 MYSQL QUERY_S
   
  CREATE DATABASE DATABASE  - CREATES A NEW DATABASE.
  
  CREATE TABLE TABLENAME(COL1,..)   - CREATES A NEW TABLE.  // CREATE TABLE USERS(ID INT NOT NULL AUTO_INCREMENT, NAME VARCHAR(50) NOT NULL,AGE INT NOT NULL, PRIMARY KEY(ID));
 
  INSERT INTO TABLE_NAME VALUES (VALUE1,...);	- inserts new data into a database.//  INSERT INTO STUDENTS VALUES (NULL,'JITH',21,'MALE','NAGAI','8344283430');
    
  INSERT INTO TABLE_NAME (COLUM_NNAME,...) VALUES (VALUE1,...); - ANOTHER WAY OF VALUES INSERT.
  
  INSERT INTO TABLE_NAME (COLUMN_NAME,..) VALUES  (VALUES1),(VALUES2),....; - MULTIPLE RECORDS INSERT.
  
  DELETE  FROM TABLE_NAME WHERE COLUMN_NAME = VALUE; - IT HAS DELETE RECORD;
  
  SELECT * FROM TABLE_NAME; - SHOW DATA FROM TABLE.
  
  SELECT COLUMN_NAME,... FROM TABLE_NAME -- SHOW PARTICULAR RECORDS FRM TABLE;
  
  SELECT COLUMN1,..FROM TABLE_NAME - HE FIELD NAMES OF THE TABLE YOU WANT TO SELECT DATA FROM.
  
  SELECT * FROM TABLE_NAME WHERE COLUMN_NAME = FIND VALUE; --- SHOW REQUIRED RECORD // SELECT * FROM STUDENTS WHERE MARK = 100;
  
  ALTER TABLE TABLE_NAME ADD COLUMN_NAME AFTER PREVIOUS COLUMN_NAME;  //ALTER TABLE USERS ADD GENDER VARCHAR(6) NOT NULL AFTER AGE;
  
  (MULTI COL)-> ALTER TABLE TABLE_NAME ADD COLUMN_NAME_1,ADD COLUMN_NAME_2,...N.
  
  ALTER TABLE TABLE_NAME MODIFY COLUMN_NAME - IT CHANGES TO COLUMN DATATYPE & SIZES // ALTER TABLE USERS MODIFY CONTACT VARCHAR(25) NOT NULL;
  
   ALTER TABLE  TABLE_NAME CHANGE COLUMN OLD_COLUMN  NEW_COLUMN DATATYPE;- CHANGE COLUMN NAME.
  
  ALTER TABLE TABLE_NAME RENAME TO NEW_TABLE_NAME- IT HAS CHANGE TO TABLENAME.
  
  UPDATE TABLE_NAME SET  COLUMN_NAME= VALUE ..., WHERE COLUMN_NAME= VALUE,; - IT USED TO CHANGE VALUES;
  
  TRUNCATE TABLE_NAME - IT USED TO DELETE THE ALL RECORDS FROM THE TABLE;
  
  MYSQL OPERATOR CONDITIONS;
  
  * AND - CHECK TRUE CONDITIONS
   
  * OR  - CHECK EITHER TRUE OR FALSE 
  
  * >,<,>=,<=, - 
  
  * DISTINCT - IT GIVES UNIQ VALUES.=>
  
  * ORDER BY REQ_COLUMN - TABLE SORTING.
  
  * COUNT(COLUMN_NAME) - COUNTING THE RECORDS. //SELECT COUNT (CITY) FROM STUDENTS. > IT COUNT ALL RECORDS 
  
  * COUNT (DISTINCT COLUMN_NAME) - IT COUNT UNIQUE RECORDS. > AS...TOTAL
  
  SELECT * FROM TABLE_NAME LIMT 0 T0 10 -  USED TO DEFINE THE LIMIT RECORDS...IT HAS SHOW ONLY 10 RECORDS.
  
  FIND AGGREGATE FUNCTIONS.
  * MAX
  * MIN
  * AVG
  * ROUND AVG (),0
  * SUM
  * COUNT - (GROUP BY) - USED TO SPLITED COUNT.
  
  SELECT * FROM TABLE_NAME WHERE COLUMN_NAME LIKE '_%' - FIND FIRST,'%_' FIND LAST, '%_%' FIND MIDDLE.

  MYSQL JOINS
  (LEFT JOIN SHOW ALL RECORDS FROM LEFT SIDE TABLE)
  *LEFT JOIN- SELECT TABLENAME.COLUMN_NAME,..., FROM (PARENT TABLE)TABLENAME LEFT JOIN TABLENAME ON (CHILD_TABLE)TABLE_NAME.COLUMN_NAME=(CHID_TABLE)TABLE_NAME.COLUMN_NAME;
   // select information.ID,information.NAME,attendance.LOGIN_DATE from information left join attendance on information.ID=attendance.ID;

  (RIGHT JOIN SHOW ALL RECORDS FROM RIGHT SIDE TABLE)
  *RIGHT JOIN- SELECT TABLENAME.COLUMN_NAME,..., FROM (PARENT TABLE)TABLENAME RIGHT  JOIN TABLENAME ON (CHILD_TABLE)TABLE_NAME.COLUMN_NAME=(CHID_TABLE)TABLE_NAME.COLUMN_NAME;
   // select information.ID,information.NAME,attendance.LOGIN_DATE from information RIGHT join attendance on information.ID=attendance.ID;

